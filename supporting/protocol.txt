Protocol v1.3, 11/5/2016.

This protocol had a few design goals:

1. Keep the code in the Dalek simple.
2. Make the Dalek side of the protocol self-healing; a failure of a controller 
   should bring the Dalek to rest.

[The primary reason for #1 was because I didn't want to have to open
up the Dalek and reprogram it. Now that the main board is a Moteino,
this is slightly less of an issue; I can reprogram the main board
wirelessly. The other two controller boards are less accessible
though.]

This means that decisions like the vector interpretation of a joystick
position, turned in to relative forward/backward drive ratios, is the
responsibility of the remote control; the Dalek itself simply gets
commands that tell it to set its wheels to move forward or backward at
a given percentage of their maximum. This worked well until converting
to brushless DC motors, where the range is more substantial than the
old brushed motors: now limiting to 2/3 of the range is still too
fast, and limiting to 1/3 of the range offers only 3 stops (b/c the
protocol only differentiates by tens of percent). So "slow" and "fast"
now have to be abstracted in to the protocol (as of protocol 1.2).

Commands are single characters, with the exception of the music
playing commands (which are two characters).

The motor commands are designed so that the remote only needs to send
a simple 'G' to tell the Dalek to continue doing what it did last
time; a continuous stream of these pulses lets it move with minimal
required airtime. When the next 200mS of drive time need to be
different than the current one, the remote has that 200mS to send
commands that prepare the Dalek for the new motor speeds/directions
before it has to send another 'G' to get it going in the new
direction.


G##: Go; joystick is at (x,y) as defined by the two (signed) bytes (-100..100)
   The drive system will carry this pulse forward for 200mS. As long as a 
   stream of 'G' pulses comes in faster than one every 200mS, the motors will 
   run continuously.

+: set fast mode
-: set slow mode

(: rotate head left 1 pulse
): rotate head right 1 pulse
^: move gun up one pulse
v: move gun down one pulse

m: hard-stop motors (Brake) and stop all sound that might be playing
   (Brake will stay on for 200mS, just like 'G' pulses.)

M#: play a sound with the given # (0-9)
    0: x button
    1: y button
    2: A button
    3: B button
    4: left shoulder button (firing noise)
    5: right shoulder button ("exterminate!")
    6: left D
    7: right D
    8: up D
    9: down D

